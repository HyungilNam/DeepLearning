print('넘파이 예시')
print('\n')

#넘파이 가져오기
import numpy as np

#배열 생성
print('<<<넘파이 배열 생성하기>>>')
x = np.array([1.0, 2.0, 3.0])
print(x)
print(type(x))
print('----------------------------------------------')
#넘파이 산술 연산
print('<<<넘파이 산술 연산>>>')
y = np.array([2.0, 4.0, 6.0])
print(x+y)
print(x-y)
print(x*y)
print(x/y)
print(x**y)
print('----------------------------------------------')
print('<<<브로드캐스트>>>')
print(x/2.0)
print('----------------------------------------------')
print('<<<넘파이 N차원 배열>>>')
A = np.array([[1, 2], [3, 4]])
print(A)
print(A.shape)
print(A.dtype)		#실험 결과 A.rank에 대한 것은 없음
print('----------------------------------------------')
print('<<<넘파이 N차원 배열의 연산>>>')
B = np.array([[3, 0], [0, 6]])
print(A + B)
print(A - B)
print(A * B)
#print(A / B)
print(A ** B)
print('----------------------------------------------')
print('<<<넘파이 N차원 배열의 브로드캐스트>>>')
print(A * 10)
print('----------------------------------------------')
print('<<<브로드캐스트>>>')
C = np.array([10, 20])
print(A*C)
print('----------------------------------------------')
print('<<<원소 접근>>>')
print('직접 접근')
Z = np.array([[51, 55], [14, 19], [0, 4]])
print('전체 출력 >>>' + str(Z))
print('0번째 출력 >>>' + str(Z[0]))
print('[0][1]번째 출력 >>>' + str(Z[0][1]))
print('for 문으로 접근')
for row in Z:
    print(row)
print('평탄화를 이용한 접근')
Z = Z.flatten()			#Z를 1차원 배열로 변환(평탄화)
print('전체 출력 >>>'+ str(Z))
print('인덱스가 0, 2, 4인 원소 얻기 >>>' + str(Z[np.array([0, 2, 4])]))
print('boolean으로 꺼내보기')
print('Z가 15보다 큰 경우만 출력 boolean으로 출력 >>>' + str(Z>15))
print('Z의 원소가 15보다 큰 경우만 출력 >>>' + str(Z[Z>15]))

